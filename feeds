#!/usr/bin/env bash

usage() {
  printf "Usage: $0 [-w] -f <FILE...>\n"
  exit 1
}

convert_datetime(){
  declare -A  month=([Jan]=01 [Feb]=02 [Mar]=03 [Apr]=04 [May]=05 [Jun]=06
  [Jul]=07 [Aug]=08 [Sep]=09 [Oct]=10 [Nov]=11 [Dec]=12)

  declare -a datetime=($1)

  printf "${datetime[3]}-${month[${datetime[2]}]}-${datetime[1]}\n"
}

print_items(){
  for item in "${items[@]}"; do
      printf "$item\n"
  done | sort -r
}

generate_html(){
cat <<EOF >/tmp/feeds.html
<html>
<head><title>feeds</title></head>
<body>
<h1>./feeds</h1>
<table>
$(print_items)
</table>
</body>
</html>
EOF
}

while getopts ':f:w' OPTION; do
  case "$OPTION" in
    f)
      file="$OPTARG"
      [[ ! -r $file ]] && usage
    ;;
    w)
      w='true'
    ;;
    ?)
      usage
    ;;
  esac
done
shift "$(($OPTIND -1))"

[[ $OPTIND -eq 1 ]] && usage
[[ -z $file ]] && usage

while read -r url; do
  while read -r feed; do
    [[ $feed =~ \</item\> ]] && item=false
    [[ $feed =~ \<item\> ]] && item=true

    if [[ $item = true ]]; then
      if [[ $feed =~ \<title\>(.*)\</title\> ]];then
        title=${BASH_REMATCH[1]}
      fi
      if [[ $feed =~ \<pubDate\>.*\ ([0-9]{2})\ ([A-Za-z]{3})\ ([0-9]{4}).*\</pubDate\> ]]; then
        date=$(convert_datetime "${BASH_REMATCH[@]}")
      fi
      if [[ $feed =~ \<link\>(.*)\</link\> ]]; then
        link=${BASH_REMATCH[1]}
      fi
      if [[ ! -z $title && ! -z $date && ! -z $link ]]; then
        if [[ -z $w ]]; then
          items+=("$date $title $link")
        else
          items+=("<tr><td>$date</td> <td><a href="$link">$title</a></td></tr>")
        fi
        title="";date="";link=""
      fi
    fi
  done < <(curl --silent $url)
done < "$file"

if [[ -z $w ]]; then
  print_items
else
  generate_html
fi
